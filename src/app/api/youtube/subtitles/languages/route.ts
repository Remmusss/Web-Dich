import { NextRequest, NextResponse } from 'next/server';

const defaultLanguages = [
  { code: 'en', name: 'English' },
  { code: 'vi', name: 'Vietnamese' },
  { code: 'fr', name: 'French' },
  { code: 'de', name: 'German' },
  { code: 'ja', name: 'Japanese' },
  { code: 'ko', name: 'Korean' },
  { code: 'es', name: 'Spanish' },
  { code: 'zh', name: 'Chinese' }
];

export const runtime = 'edge';
export const dynamic = 'force-dynamic';

async function validateVideoId(videoId: string): Promise<boolean> {
  try {
    const response = await fetch(`https://www.youtube.com/oembed?url=http://www.youtube.com/watch?v=${videoId}&format=json`);
    return response.status === 200;
  } catch {
    return false;
  }
}

async function fetchCaptions(videoId: string) {
  const response = await fetch(`https://www.youtube.com/watch?v=${videoId}`);
  const html = await response.text();
  
  try {
    // Extract player response from HTML
    const playerResponseMatch = html.match(/ytInitialPlayerResponse\s*=\s*({.+?});/);
    if (!playerResponseMatch) {
      return null;
    }

    const playerResponse = JSON.parse(playerResponseMatch[1]);
    const captions = playerResponse?.captions?.playerCaptionsTracklistRenderer?.captionTracks;
    
    if (!captions) {
      return null;
    }

    return captions.map((track: any) => ({
      code: track.languageCode,
      name: track.name?.simpleText || getLanguageName(track.languageCode) || track.languageCode,
      isAutoGenerated: track.kind === 'asr',
      url: track.baseUrl
    }));
  } catch (error) {
    console.error('Error parsing captions:', error);
    return null;
  }
}

export async function GET(request: NextRequest) {
  const videoId = request.nextUrl.searchParams.get('videoId');

  if (!videoId) {
    return NextResponse.json(
      { error: 'Missing videoId parameter' },
      { status: 400 }
    );
  }

  try {
    // Validate video ID
    const isValid = await validateVideoId(videoId);
    if (!isValid) {
      return NextResponse.json(
        { error: 'Invalid YouTube video ID' },
        { status: 400 }
      );
    }

    // Fetch captions
    const languages = await fetchCaptions(videoId);
    
    if (!languages || languages.length === 0) {
      return NextResponse.json({
        languages: defaultLanguages,
        isDefault: true
      });
    }

    return NextResponse.json({ 
      languages,
      isDefault: false
    });

  } catch (error) {
    console.error('Error fetching YouTube captions:', error);
    
    if (error instanceof Error) {
      const message = error.message.toLowerCase();
      if (message.includes('video unavailable') || message.includes('not found')) {
        return NextResponse.json(
          { error: 'Video is unavailable or private' },
          { status: 404 }
        );
      }
    }
    
    return NextResponse.json(
      { error: 'Failed to fetch YouTube captions' },
      { status: 500 }
    );
  }
}

function getLanguageName(code: string): string {
  const languageNames: { [key: string]: string } = {
    'en': 'English',
    'vi': 'Vietnamese',
    'fr': 'French',
    'de': 'German',
    'ja': 'Japanese',
    'ko': 'Korean',
    'es': 'Spanish',
    'zh': 'Chinese',
  };
  return languageNames[code] || code;
} 