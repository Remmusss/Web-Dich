'use client'

import { useState } from 'react'
import { ArrowPathIcon } from '@heroicons/react/24/outline'
import { aiService } from '@/lib/ai-service'

interface FoodResult {
  name: string
  country: string
  foodType: string
  origin: string
  price: string
  description: string
  ingredients?: string[]
  cookingTime?: string
  difficulty?: string
}

// List of previously generated food names to avoid duplicates
const previouslyGeneratedFoods = [

]

export default function RandomFoodPage() {
  const [foodResult, setFoodResult] = useState<FoodResult | null>(null)
  const [isGenerating, setIsGenerating] = useState<boolean>(false)
  const [foodHistory, setFoodHistory] = useState<FoodResult[]>([])
  const [selectedCountry, setSelectedCountry] = useState<string>('all')
  const [selectedFoodType, setSelectedFoodType] = useState<string>('all')
  const [error, setError] = useState<string | null>(null)
  const [generatedFoodNames, setGeneratedFoodNames] = useState<string[]>([])

  const countries = [
    { value: 'all', label: 'üåç T·∫•t c·∫£ qu·ªëc gia' },
    { value: 'vietnam', label: 'üáªüá≥ Vi·ªát Nam' },
    { value: 'japan', label: 'üáØüáµ Nh·∫≠t B·∫£n' },
    { value: 'korea', label: 'üá∞üá∑ H√†n Qu·ªëc' },
    { value: 'china', label: 'üá®üá≥ Trung Qu·ªëc' },
    { value: 'thailand', label: 'üáπüá≠ Th√°i Lan' },
    { value: 'italy', label: 'üáÆüáπ √ù' },
    { value: 'france', label: 'üá´üá∑ Ph√°p' },
    { value: 'usa', label: 'üá∫üá∏ M·ªπ' },
    { value: 'mexico', label: 'üá≤üáΩ Mexico' },
  ]

  const foodTypes = [
    { value: 'all', label: 'üçΩÔ∏è T·∫•t c·∫£ lo·∫°i' },
    { value: 'main', label: 'üçö M√≥n ch√≠nh' },
    { value: 'appetizer', label: 'ü•ó Khai v·ªã' },
    { value: 'dessert', label: 'üç∞ Tr√°ng mi·ªáng' },
    { value: 'drink', label: 'ü•§ N∆∞·ªõc u·ªëng' },
    { value: 'snack', label: 'üçø ƒÇn v·∫∑t' },
  ]

  // Generate a random food using AI
  const generateFood = async () => {
    setIsGenerating(true)
    setError(null)

    try {
      const countryFilter = `${countries.find(c => c.value === selectedCountry)?.label}`
      const foodTypeFilter = `${foodTypes.find(t => t.value === selectedFoodType)?.label}`

      const prompt = `B·∫°n l√† m·ªôt chuy√™n gia ·∫©m th·ª±c. H√£y g·ª£i √Ω cho t√¥i m·ªôt m√≥n ${foodTypeFilter} ng·∫´u nhi√™n c·ªßa ${countryFilter} . 

Y√™u c·∫ßu b·∫Øt bu·ªôc:
1. PH·∫¢I tr·∫£ v·ªÅ ƒë√∫ng ƒë·ªãnh d·∫°ng JSON nh∆∞ sau:
{
  "name": "t√™n m√≥n ƒÉn",
  "country": "qu·ªëc gia",
  "foodType": "lo·∫°i m√≥n ƒÉn",
  "origin": "n∆°i s·∫£n sinh ra m√≥n ƒÉn",
  "price": "kho·∫£ng gi√° ti·ªÅn",
  "description": "m√¥ t·∫£ ng·∫Øn g·ªçn v·ªÅ m√≥n ƒÉn"
}

2. C√°c y√™u c·∫ßu kh√°c:
- T√™n m√≥n ph·∫£i b·∫±ng ti·∫øng Vi·ªát
- Gi√° ti·ªÅn ph·∫£i ·ªü ƒë·ªãnh d·∫°ng "t·ª´ X ƒë·∫øn Y VND"
- M√¥ t·∫£ ng·∫Øn g·ªçn, d·ªÖ hi·ªÉu
- KH√îNG th√™m b·∫•t k·ª≥ text n√†o kh√°c ngo√†i JSON
- KH√îNG th√™m comments hay gi·∫£i th√≠ch
- KH√îNG th√™m d·∫•u backtick hay markdown
- KH√îNG ch·ªçn c√°c m√≥n ƒë√£ c√≥ trong danh s√°ch sau: ${generatedFoodNames.join(', ')}`

      const result = await aiService.processWithAI(prompt)
      console.log(prompt)
      try {
        // Clean the response to ensure it's valid JSON
        const cleanResult = result.replace(/```json\n?|\n?```/g, '').trim()
        const foodData = JSON.parse(cleanResult) as FoodResult

        // Validate required fields
        if (!foodData.name || !foodData.country || !foodData.foodType || !foodData.origin || !foodData.price || !foodData.description) {
          throw new Error('Thi·∫øu th√¥ng tin b·∫Øt bu·ªôc')
        }

        setFoodResult(foodData)

        // Add to history (max 10 entries)
        setFoodHistory(prev => {
          const updatedHistory = [foodData, ...prev]
          return updatedHistory.slice(0, 10)
        })

        // Add to generated food names
        setGeneratedFoodNames(prev => [...prev, foodData.name])

      } catch (parseError) {
        console.error('JSON parse error:', parseError)
        setError('Kh√¥ng th·ªÉ x·ª≠ l√Ω k·∫øt qu·∫£ t·ª´ AI. Vui l√≤ng th·ª≠ l·∫°i.')
      }
    } catch (error) {
      console.error('Error generating food:', error)
      setError('C√≥ l·ªói x·∫£y ra khi t·∫°o m√≥n ƒÉn. Vui l√≤ng th·ª≠ l·∫°i.')
    } finally {
      setIsGenerating(false)
    }
  }

  // Reset history
  const resetHistory = () => {
    setFoodHistory([])
    setFoodResult(null)
    setError(null)
    setGeneratedFoodNames([])
  }

  return (
    <div className="min-h-screen to-amber-50 py-8 px-4">
      <div className="max-w-2xl mx-auto">
        <div className="bg-white rounded-2xl shadow-lg border border-orange-100 overflow-hidden">
          <div className="p-8">
            <div className="space-y-8">
              <div className="text-center mb-8">
                <h1 className="text-3xl font-bold text-orange-800 mb-2">üçΩÔ∏è Food Picker</h1>
                <p className="text-gray-600">
                  Kh√¥ng bi·∫øt ƒÉn g√¨? ƒê·ªÉ ch√∫ng t√¥i gi√∫p b·∫°n quy·∫øt ƒë·ªãnh!
                </p>
              </div>

              <div className="space-y-6">
                <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                  <div>
                    <label className="block text-sm font-medium text-orange-800 mb-2">Ch·ªçn qu·ªëc gia</label>
                    <select
                      value={selectedCountry}
                      onChange={(e) => setSelectedCountry(e.target.value)}
                      className="w-full rounded-xl border-2 border-orange-200 px-4 py-3 text-sm focus:border-orange-400 focus:ring-2 focus:ring-orange-200 transition-all"
                    >
                      {countries.map(country => (
                        <option key={country.value} value={country.value}>
                          {country.label}
                        </option>
                      ))}
                    </select>
                  </div>

                  <div>
                    <label className="block text-sm font-medium text-orange-800 mb-2">Ch·ªçn lo·∫°i m√≥n</label>
                    <select
                      value={selectedFoodType}
                      onChange={(e) => setSelectedFoodType(e.target.value)}
                      className="w-full rounded-xl border-2 border-orange-200 px-4 py-3 text-sm focus:border-orange-400 focus:ring-2 focus:ring-orange-200 transition-all"
                    >
                      {foodTypes.map(type => (
                        <option key={type.value} value={type.value}>
                          {type.label}
                        </option>
                      ))}
                    </select>
                  </div>
                </div>

                <button
                  onClick={generateFood}
                  disabled={isGenerating}
                  className="w-full flex items-center justify-center gap-3 py-4 px-6 bg-gradient-to-r from-orange-500 to-amber-500 text-white rounded-xl hover:from-orange-600 hover:to-amber-600 transition-all transform hover:scale-[1.02] disabled:opacity-70 disabled:hover:scale-100 shadow-lg"
                >
                  <ArrowPathIcon className={`w-5 h-5 ${isGenerating ? 'animate-spin' : ''}`} />
                  <span className="font-medium">{isGenerating ? 'ƒêang t√¨m m√≥n ngon...' : 'T√¨m m√≥n ƒÉn ng·∫´u nhi√™n'}</span>
                </button>
              </div>

              {error && (
                <div className="mt-4 p-4 bg-red-50 border-2 border-red-200 rounded-xl text-red-600 text-sm">
                  {error}
                </div>
              )}

              {(foodResult !== null || isGenerating) && (
                <div className="mt-8">
                  <div className="bg-gradient-to-br from-orange-50 to-amber-50 p-8 rounded-xl border-2 border-orange-200 text-center transform transition-all hover:scale-[1.02]">
                    <p className="text-sm text-orange-600 mb-3">M√≥n ƒÉn ƒë∆∞·ª£c ch·ªçn</p>
                    <div className="space-y-4">
                      <div>
                        <p className="text-3xl font-bold text-orange-800">
                          {isGenerating ? '...' : foodResult?.name}
                        </p>
                        <p className="text-sm text-orange-600">
                          {isGenerating ? '' : foodResult?.country}
                        </p>
                      </div>

                      {!isGenerating && foodResult && (
                        <div className="text-left space-y-3">
                          <div>
                            <p className="text-sm font-medium text-orange-800">Qu·ªëc gia</p>
                            <p className="text-gray-600">{foodResult.country}</p>
                          </div>
                          <div>
                            <p className="text-sm font-medium text-orange-800">Lo·∫°i m√≥n</p>
                            <p className="text-gray-600">{foodResult.foodType}</p>
                          </div>
                          <div>
                            <p className="text-sm font-medium text-orange-800">Ngu·ªìn g·ªëc</p>
                            <p className="text-gray-600">{foodResult.origin}</p>
                          </div>
                          <div>
                            <p className="text-sm font-medium text-orange-800">Gi√°</p>
                            <p className="text-gray-600">{foodResult.price}</p>
                          </div>
                          <div>
                            <p className="text-sm font-medium text-orange-800">M√¥ t·∫£</p>
                            <p className="text-gray-600">{foodResult.description}</p>
                          </div>
                        </div>
                      )}
                    </div>
                  </div>
                </div>
              )}

              {foodHistory.length > 0 && (
                <div className="mt-8">
                  <div className="flex items-center justify-between mb-3">
                    <p className="text-sm font-medium text-orange-800">üìú L·ªãch s·ª≠ m√≥n ƒë√£ ch·ªçn</p>
                    <button
                      onClick={resetHistory}
                      className="text-xs text-orange-600 hover:text-orange-800 transition-colors"
                    >
                      X√≥a l·ªãch s·ª≠
                    </button>
                  </div>

                  <div className="bg-orange-50 rounded-xl border-2 border-orange-200 overflow-hidden">
                    <div className="divide-y divide-orange-200">
                      {foodHistory.map((item, index) => (
                        <div key={index} className="p-4 text-sm hover:bg-orange-100 transition-colors">
                          <p className="font-medium text-orange-800">{item.name}</p>
                          <div className="flex items-center justify-between">
                            <span className="text-orange-600">{item.country}</span>
                            <span className="text-xs text-orange-500">{item.price}</span>
                          </div>
                        </div>
                      ))}
                    </div>
                  </div>
                </div>
              )}
            </div>
          </div>
        </div>
      </div>
    </div>
  )
} 