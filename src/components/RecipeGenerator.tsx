'use client'

import { useState } from 'react'
import { BeakerIcon, ClockIcon, UsersIcon, ArrowPathIcon } from '@heroicons/react/24/outline'
import { aiService } from '@/lib/ai-service'
import ReactMarkdown from 'react-markdown'

interface Recipe {
    name: string
    description: string
    ingredients: string[]
    steps: string[]
    cookingTime: string
    servings: string
    difficulty: string
    tips: string[]
    nutritionInfo: {
        calories: string
        protein: string
        carbs: string
        fat: string
    }
    healthScore?: {
        score: number
        details: string[]
    }
}

export default function RecipeGenerator() {
    const [dishName, setDishName] = useState<string>('')
    const [recipe, setRecipe] = useState<Recipe | null>(null)
    const [isLoading, setIsLoading] = useState<boolean>(false)
    const [error, setError] = useState<string>('')
    const [recipeHistory, setRecipeHistory] = useState<{recipe: Recipe, timestamp: string}[]>([])

    const calculateHealthScore = (nutritionInfo: Recipe['nutritionInfo'], servings: string): Recipe['healthScore'] => {
        // Chuy·ªÉn ƒë·ªïi c√°c gi√° tr·ªã dinh d∆∞·ª°ng th√†nh s·ªë
        const calories = parseInt(nutritionInfo.calories.replace(/[^0-9]/g, ''))
        const protein = parseInt(nutritionInfo.protein.replace(/[^0-9]/g, ''))
        const carbs = parseInt(nutritionInfo.carbs.replace(/[^0-9]/g, ''))
        const fat = parseInt(nutritionInfo.fat.replace(/[^0-9]/g, ''))
        const servingsNum = parseInt(servings.replace(/[^0-9]/g, '')) || 1

        const details: string[] = []
        let score = 70 // ƒêi·ªÉm c∆° b·∫£n

        // T√≠nh to√°n calories tr√™n m·ªói ph·∫ßn ƒÉn
        const caloriesPerServing = calories / servingsNum
        if (caloriesPerServing <= 500) {
            score += 10
            details.push('‚úì L∆∞·ª£ng calories ph√π h·ª£p cho m·ªôt b·ªØa ƒÉn')
        } else if (caloriesPerServing > 800) {
            score -= 10
            details.push('‚ö†Ô∏è L∆∞·ª£ng calories cao cho m·ªôt b·ªØa ƒÉn')
        }

        // ƒê√°nh gi√° t·ª∑ l·ªá protein
        const proteinCalories = protein * 4
        const proteinRatio = (proteinCalories / calories) * 100
        if (proteinRatio >= 20) {
            score += 10
            details.push('‚úì Gi√†u protein, t·ªët cho c∆° b·∫Øp')
        } else if (proteinRatio < 10) {
            score -= 5
            details.push('‚ö†Ô∏è L∆∞·ª£ng protein th·∫•p')
        }

        // ƒê√°nh gi√° t·ª∑ l·ªá carbs
        const carbsCalories = carbs * 4
        const carbsRatio = (carbsCalories / calories) * 100
        if (carbsRatio >= 45 && carbsRatio <= 65) {
            score += 5
            details.push('‚úì T·ª∑ l·ªá carbs c√¢n ƒë·ªëi')
        } else if (carbsRatio > 65) {
            score -= 5
            details.push('‚ö†Ô∏è L∆∞·ª£ng carbs cao')
        }

        // ƒê√°nh gi√° t·ª∑ l·ªá ch·∫•t b√©o
        const fatCalories = fat * 9
        const fatRatio = (fatCalories / calories) * 100
        if (fatRatio <= 30) {
            score += 5
            details.push('‚úì L∆∞·ª£ng ch·∫•t b√©o h·ª£p l√Ω')
        } else if (fatRatio > 35) {
            score -= 10
            details.push('‚ö†Ô∏è L∆∞·ª£ng ch·∫•t b√©o cao')
        }

        // Gi·ªõi h·∫°n ƒëi·ªÉm t·ª´ 0-100
        score = Math.max(0, Math.min(100, score))

        return {
            score,
            details
        }
    }

    const generateRecipe = async () => {
        if (!dishName.trim()) {
            setError('Vui l√≤ng nh·∫≠p t√™n m√≥n ƒÉn')
            return
        }

        setIsLoading(true)
        setError('')
        setRecipe(null)

        try {
            const prompt = `B·∫°n l√† m·ªôt ƒë·∫ßu b·∫øp chuy√™n nghi·ªáp. H√£y t·∫°o c√¥ng th·ª©c n·∫•u m√≥n "${dishName}" v·ªõi c√°c th√¥ng tin sau:

Y√™u c·∫ßu tr·∫£ v·ªÅ JSON v·ªõi c·∫•u tr√∫c sau:
{
    "name": "T√™n m√≥n ƒÉn",
    "description": "M√¥ t·∫£ ng·∫Øn g·ªçn v·ªÅ m√≥n ƒÉn",
    "ingredients": [
        "Danh s√°ch nguy√™n li·ªáu v·ªõi s·ªë l∆∞·ª£ng c·ª• th·ªÉ"
    ],
    "steps": [
        "C√°c b∆∞·ªõc n·∫•u chi ti·∫øt. S·ª≠ d·ª•ng Markdown ƒë·ªÉ ƒë·ªãnh d·∫°ng. V√≠ d·ª•: **B∆∞·ªõc 1: S∆° ch·∫ø**: R·ª≠a s·∫°ch c√°c nguy√™n li·ªáu..."
    ],
    "cookingTime": "Th·ªùi gian n·∫•u (v√≠ d·ª•: 30 ph√∫t)",
    "servings": "S·ªë ng∆∞·ªùi ƒÉn",
    "difficulty": "ƒê·ªô kh√≥ (D·ªÖ/Trung b√¨nh/Kh√≥)",
    "tips": [
        "C√°c m·∫πo n·∫•u ƒÉn h·ªØu √≠ch. C√≥ th·ªÉ s·ª≠ d·ª•ng **in ƒë·∫≠m** ho·∫∑c *in nghi√™ng* ƒë·ªÉ nh·∫•n m·∫°nh"
    ],
    "nutritionInfo": {
        "calories": "S·ªë calo cho m·ªôt ph·∫ßn ƒÉn",
        "protein": "L∆∞·ª£ng protein",
        "carbs": "L∆∞·ª£ng carbs",
        "fat": "L∆∞·ª£ng ch·∫•t b√©o"
    }
}

Y√™u c·∫ßu:
1. C√¥ng th·ª©c ph·∫£i chi ti·∫øt v√† d·ªÖ l√†m theo
2. Li·ªát k√™ ƒë·∫ßy ƒë·ªß nguy√™n li·ªáu v·ªõi s·ªë l∆∞·ª£ng c·ª• th·ªÉ
3. C√°c b∆∞·ªõc n·∫•u ph·∫£i r√µ r√†ng v√† d·ªÖ hi·ªÉu
4. Th√™m c√°c m·∫πo n·∫•u ƒÉn h·ªØu √≠ch
5. Th√¥ng tin dinh d∆∞·ª°ng ph·∫£i ch√≠nh x√°c
6. S·ª≠ d·ª•ng ng√¥n ng·ªØ ti·∫øng Vi·ªát
7. ƒê·∫£m b·∫£o c√¥ng th·ª©c kh·∫£ thi v√† th·ª±c t·∫ø
8. S·ª≠ d·ª•ng Markdown ƒë·ªÉ ƒë·ªãnh d·∫°ng:
   - **in ƒë·∫≠m** cho ti√™u ƒë·ªÅ c√°c b∆∞·ªõc
   - *in nghi√™ng* cho c√°c l∆∞u √Ω quan tr·ªçng
   - C√≥ th·ªÉ d√πng > ƒë·ªÉ t·∫°o blockquote cho m·∫πo ƒë·∫∑c bi·ªát`

            const response = await aiService.processWithAI(prompt)
            try {
                const jsonMatch = response.match(/\{[\s\S]*\}/)
                if (!jsonMatch) {
                    throw new Error('Kh√¥ng t√¨m th·∫•y c√¥ng th·ª©c trong ph·∫£n h·ªìi')
                }
                const recipeData = JSON.parse(jsonMatch[0])
                
                // T√≠nh ƒëi·ªÉm healthy
                const healthScore = calculateHealthScore(recipeData.nutritionInfo, recipeData.servings)
                const newRecipe = { ...recipeData, healthScore }
                setRecipe(newRecipe)

                // Add to history
                const timestamp = new Date().toLocaleTimeString()
                setRecipeHistory(prev => {
                    const updatedHistory = [{recipe: newRecipe, timestamp}, ...prev]
                    return updatedHistory.slice(0, 24)
                })
            } catch (error) {
                console.error('Error parsing AI response:', error)
                throw new Error('Kh√¥ng th·ªÉ ph√¢n t√≠ch c√¥ng th·ª©c t·ª´ AI')
            }
        } catch (error) {
            console.error('Error generating recipe:', error)
            setError('Kh√¥ng th·ªÉ t·∫°o c√¥ng th·ª©c. Vui l√≤ng th·ª≠ l·∫°i sau.')
        } finally {
            setIsLoading(false)
        }
    }

    const handleKeyDown = (e: React.KeyboardEvent<HTMLInputElement>) => {
        if (e.key === 'Enter') {
            e.preventDefault()
            generateRecipe()
        }
    }

    const getHealthScoreColor = (score: number) => {
        if (score >= 80) return 'bg-green-100 text-green-700'
        if (score >= 60) return 'bg-green-50 text-green-600'
        if (score >= 40) return 'bg-yellow-50 text-yellow-600'
        if (score >= 20) return 'bg-orange-50 text-orange-600'
        return 'bg-red-50 text-red-600'
    }

    const resetHistory = () => {
        setRecipeHistory([])
        setRecipe(null)
    }

    return (
        <div className="min-h-screen py-8 px-4">
            <div className="max-w-4xl mx-auto">
                <div className="bg-white rounded-2xl shadow-lg border border-gray-100 overflow-hidden">
                    <div className="p-8">
                        <div className="space-y-8">
                            <div className="text-center mb-8">
                                <h1 className="text-3xl font-bold text-gray-800 mb-2">üç≥ Random Recipe</h1>
                                <p className="text-gray-600">
                                    T·∫°o c√¥ng th·ª©c n·∫•u ƒÉn ng·∫´u nhi√™n v·ªõi h∆∞·ªõng d·∫´n chi ti·∫øt.
                                </p>
                            </div>

                            <div className="space-y-6">
                                <div>
                                    <label className="block text-sm font-medium text-gray-800 mb-2">T√™n m√≥n ƒÉn</label>
                                    <div className="flex gap-2">
                                        <input
                                            type="text"
                                            value={dishName}
                                            onChange={(e) => setDishName(e.target.value)}
                                            onKeyDown={handleKeyDown}
                                            placeholder="Nh·∫≠p t√™n m√≥n ƒÉn b·∫°n mu·ªën n·∫•u"
                                            className="flex-1 rounded-xl border-2 border-gray-200 focus:border-gray-400 focus:ring-2 focus:ring-gray-200"
                                        />
                                        <button
                                            onClick={generateRecipe}
                                            disabled={!dishName.trim() || isLoading}
                                            className="flex items-center justify-center gap-3 py-2 px-6 bg-gradient-to-r from-gray-700 to-gray-800 text-white rounded-xl hover:from-gray-800 hover:to-gray-900 transition-all transform hover:scale-[1.02] disabled:opacity-70 disabled:hover:scale-100 shadow-lg"
                                        >
                                            <ArrowPathIcon className={`w-5 h-5 ${isLoading ? 'animate-spin' : ''}`} />
                                            <span className="font-medium">{isLoading ? 'ƒêang t·∫°o...' : 'T·∫°o c√¥ng th·ª©c'}</span>
                                        </button>
                                    </div>
                                    {error && <p className="mt-2 text-sm text-red-600">{error}</p>}
                                </div>

                                {(recipe !== null || isLoading) && (
                                    <div className="mt-8">
                                        <div className="bg-gradient-to-br from-gray-50 to-gray-100 p-8 rounded-xl border-2 border-gray-200">
                                            {isLoading ? (
                                                <div className="text-center text-gray-600">ƒêang t·∫°o c√¥ng th·ª©c...</div>
                                            ) : recipe && (
                                                <div className="space-y-6">
                                                    <div>
                                                        <h2 className="text-2xl font-bold text-gray-800 mb-2">{recipe.name}</h2>
                                                        <p className="text-gray-600">{recipe.description}</p>
                                                    </div>

                                                    <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                                                        <div className="flex items-center gap-2 bg-white p-3 rounded-lg border-2 border-gray-200">
                                                            <ClockIcon className="w-5 h-5 text-gray-600" />
                                                            <div>
                                                                <p className="text-sm text-gray-600">Th·ªùi gian n·∫•u</p>
                                                                <p className="font-medium text-gray-800">{recipe.cookingTime}</p>
                                                            </div>
                                                        </div>
                                                        <div className="flex items-center gap-2 bg-white p-3 rounded-lg border-2 border-gray-200">
                                                            <UsersIcon className="w-5 h-5 text-gray-600" />
                                                            <div>
                                                                <p className="text-sm text-gray-600">Kh·∫©u ph·∫ßn</p>
                                                                <p className="font-medium text-gray-800">{recipe.servings}</p>
                                                            </div>
                                                        </div>
                                                        <div className="flex items-center gap-2 bg-white p-3 rounded-lg border-2 border-gray-200">
                                                            <BeakerIcon className="w-5 h-5 text-gray-600" />
                                                            <div>
                                                                <p className="text-sm text-gray-600">ƒê·ªô kh√≥</p>
                                                                <p className="font-medium text-gray-800">{recipe.difficulty}</p>
                                                            </div>
                                                        </div>
                                                    </div>

                                                    <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                                                        <div>
                                                            <h3 className="text-lg font-bold text-gray-800 mb-3">Nguy√™n li·ªáu</h3>
                                                            <div className="bg-white rounded-lg border-2 border-gray-200 p-4">
                                                                <ul className="space-y-2">
                                                                    {recipe.ingredients.map((ingredient, index) => (
                                                                        <li key={index} className="flex items-start gap-2">
                                                                            <span className="text-gray-600">‚Ä¢</span>
                                                                            <span className="text-gray-800">{ingredient}</span>
                                                                        </li>
                                                                    ))}
                                                                </ul>
                                                            </div>
                                                        </div>

                                                        <div>
                                                            <h3 className="text-lg font-bold text-gray-800 mb-3">Th√¥ng tin dinh d∆∞·ª°ng</h3>
                                                            <div className="bg-white rounded-lg border-2 border-gray-200 p-4">
                                                                <div className="grid grid-cols-2 gap-4">
                                                                    <div>
                                                                        <p className="text-sm text-gray-600">Calories</p>
                                                                        <p className="font-medium text-gray-800">{recipe.nutritionInfo.calories}</p>
                                                                    </div>
                                                                    <div>
                                                                        <p className="text-sm text-gray-600">Protein</p>
                                                                        <p className="font-medium text-gray-800">{recipe.nutritionInfo.protein}</p>
                                                                    </div>
                                                                    <div>
                                                                        <p className="text-sm text-gray-600">Carbs</p>
                                                                        <p className="font-medium text-gray-800">{recipe.nutritionInfo.carbs}</p>
                                                                    </div>
                                                                    <div>
                                                                        <p className="text-sm text-gray-600">Ch·∫•t b√©o</p>
                                                                        <p className="font-medium text-gray-800">{recipe.nutritionInfo.fat}</p>
                                                                    </div>
                                                                </div>

                                                                {recipe.healthScore && (
                                                                    <div className="mt-4 pt-4 border-t border-gray-200">
                                                                        <div className="flex items-center justify-between mb-2">
                                                                            <h4 className="font-medium text-gray-800">ƒê√°nh gi√° dinh d∆∞·ª°ng</h4>
                                                                            <span className={`px-3 py-1 rounded-full text-sm font-medium ${getHealthScoreColor(recipe.healthScore.score)}`}>
                                                                                {recipe.healthScore.score}/100
                                                                            </span>
                                                                        </div>
                                                                        <ul className="space-y-1">
                                                                            {recipe.healthScore.details.map((detail, index) => (
                                                                                <li key={index} className="text-sm text-gray-600">{detail}</li>
                                                                            ))}
                                                                        </ul>
                                                                    </div>
                                                                )}
                                                            </div>
                                                        </div>
                                                    </div>

                                                    <div>
                                                        <h3 className="text-lg font-bold text-gray-800 mb-3">C√°c b∆∞·ªõc th·ª±c hi·ªán</h3>
                                                        <div className="bg-white rounded-lg border-2 border-gray-200 p-4 space-y-4">
                                                            {recipe.steps.map((step, index) => (
                                                                <div key={index} className="prose max-w-none">
                                                                    <ReactMarkdown>{step}</ReactMarkdown>
                                                                </div>
                                                            ))}
                                                        </div>
                                                    </div>

                                                    <div>
                                                        <h3 className="text-lg font-bold text-gray-800 mb-3">M·∫πo n·∫•u ƒÉn</h3>
                                                        <div className="bg-white rounded-lg border-2 border-gray-200 p-4">
                                                            <ul className="space-y-2">
                                                                {recipe.tips.map((tip, index) => (
                                                                    <li key={index} className="flex items-start gap-2">
                                                                        <span className="text-gray-600">‚Ä¢</span>
                                                                        <div className="prose max-w-none">
                                                                            <ReactMarkdown>{tip}</ReactMarkdown>
                                                                        </div>
                                                                    </li>
                                                                ))}
                                                            </ul>
                                                        </div>
                                                    </div>
                                                </div>
                                            )}
                                        </div>
                                    </div>
                                )}

                                {recipeHistory.length > 0 && (
                                    <div className="mt-8">
                                        <div className="flex items-center justify-between mb-3">
                                            <p className="text-sm font-medium text-gray-800">üìú L·ªãch s·ª≠ c√¥ng th·ª©c</p>
                                            <button 
                                                onClick={resetHistory}
                                                className="text-xs text-gray-600 hover:text-gray-800 transition-colors"
                                            >
                                                X√≥a l·ªãch s·ª≠
                                            </button>
                                        </div>
                                        
                                        <div className="bg-gray-50 rounded-xl border-2 border-gray-200 p-4">
                                            <div className="space-y-3">
                                                {recipeHistory.map((item, index) => (
                                                    <div 
                                                        key={index} 
                                                        className="relative group"
                                                        title={`T·∫°o l√∫c ${item.timestamp}`}
                                                    >
                                                        <div className="flex items-center justify-between bg-white px-4 py-3 rounded-lg border-2 border-gray-200 hover:border-gray-300 transition-colors">
                                                            <div>
                                                                <span className="font-medium text-gray-800">{item.recipe.name}</span>
                                                                <span className="text-sm text-gray-600 ml-2">({item.recipe.difficulty})</span>
                                                            </div>
                                                            <span className="text-xs text-gray-500">{item.timestamp}</span>
                                                        </div>
                                                    </div>
                                                ))}
                                            </div>
                                        </div>
                                    </div>
                                )}
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    )
} 