'use client';

import React, { useState } from 'react';
import { Loader2, LineChart, PieChart } from "lucide-react";
import { aiService } from '@/lib/ai-service';
import { useToast } from "@/hooks/use-toast";
import ReactMarkdown from 'react-markdown';
import { Tabs, TabsList, TabsTrigger, TabsContent } from "@/components/ui/tabs";

// Import additional packages for rendering tables in markdown
import remarkGfm from 'remark-gfm';

export default function StockAnalyzer() {
    // Stock Analysis Tab
    const [stockSymbol, setStockSymbol] = useState('');
    const [loading, setLoading] = useState(false);
    const [analysis, setAnalysis] = useState<string | null>(null);
    const [stockHistory, setStockHistory] = useState<string[]>([]);
    const [analysisPeriod, setAnalysisPeriod] = useState<number>(30); // Default to 30 days
    const [sharesOwned, setSharesOwned] = useState<string>('');
    const [showCompanyInfo, setShowCompanyInfo] = useState<boolean>(true);
    const [showFinancialInfo, setShowFinancialInfo] = useState<boolean>(true);
    
    // Portfolio Allocation Tab
    const [investmentAmount, setInvestmentAmount] = useState<string>('');
    const [investmentStyle, setInvestmentStyle] = useState<string>('balanced');
    const [portfolioLoading, setPortfolioLoading] = useState(false);
    const [portfolioAllocation, setPortfolioAllocation] = useState<string | null>(null);
    
    const { toast } = useToast();

    const analysisPeriods = [
        { value: 1, label: '1 ng√†y' },
        { value: 3, label: '3 ng√†y' },
        { value: 7, label: '7 ng√†y' },
        { value: 30, label: '30 ng√†y' },
        { value: 90, label: '90 ng√†y' },
        { value: 180, label: '180 ng√†y' },
        { value: 365, label: '1 nƒÉm' },
        { value: 0, label: 'T·∫•t c·∫£' },
    ];
    
    const investmentStyles = [
        { value: 'conservative', label: 'An to√†n (R·ªßi ro th·∫•p)' },
        { value: 'balanced', label: 'C√¢n b·∫±ng (R·ªßi ro trung b√¨nh)' },
        { value: 'growth', label: 'TƒÉng tr∆∞·ªüng (R·ªßi ro cao)' },
        { value: 'aggressive', label: 'M·∫°o hi·ªÉm (R·ªßi ro r·∫•t cao)' },
    ];

    const analyzeStock = async () => {
        if (!stockSymbol.trim()) {
            toast({
                title: "L·ªói",
                description: "Vui l√≤ng nh·∫≠p m√£ ch·ª©ng kho√°n",
                variant: "destructive",
            });
            return;
        }

        setLoading(true);
        try {
            const timeframeText = analysisPeriod === 0 
                ? "to√†n b·ªô l·ªãch s·ª≠" 
                : `${analysisPeriod} ng√†y g·∫ßn ƒë√¢y`;
                
            const ownershipInfo = sharesOwned && parseInt(sharesOwned) > 0
                ? `\n\nNg∆∞·ªùi d√πng hi·ªán ƒëang n·∫Øm gi·ªØ ${sharesOwned} c·ªï phi·∫øu. Vui l√≤ng ƒë∆∞a ra l·ªùi khuy√™n c·ª• th·ªÉ cho tr∆∞·ªùng h·ª£p n√†y, bao g·ªìm chi·∫øn l∆∞·ª£c ph√π h·ª£p (gi·ªØ/b√°n b·ªõt/mua th√™m) v√† ∆∞·ªõc t√≠nh gi√° tr·ªã danh m·ª•c.`
                : '';
                
            // Build sections based on user preferences
            const sections = [];
            if (showCompanyInfo) sections.push("1. Th√¥ng tin c∆° b·∫£n v·ªÅ c√¥ng ty");
            if (showFinancialInfo) sections.push(`${sections.length + 1}. T√¨nh h√¨nh t√†i ch√≠nh g·∫ßn ƒë√¢y`);
            sections.push(`${sections.length + 1}. Xu h∆∞·ªõng gi√° c·ªï phi·∫øu trong ${timeframeText}`);
            sections.push(`${sections.length + 1}. ƒê√°nh gi√° r·ªßi ro`);
            sections.push(`${sections.length + 1}. L·ªùi khuy√™n ƒë·∫ßu t∆∞ (n√™n mua/b√°n/gi·ªØ)`);
                
            const prompt = `Ph√¢n t√≠ch chi ti·∫øt v·ªÅ m√£ ch·ª©ng kho√°n ${stockSymbol.toUpperCase()} trong ${timeframeText} bao g·ªìm:
${sections.join('\n')}

H√£y ph√¢n t√≠ch d·ª±a tr√™n d·ªØ li·ªáu th·ª±c t·∫ø v√† ƒë∆∞a ra l·ªùi khuy√™n kh√°ch quan. Tr·∫£ v·ªÅ k·∫øt qu·∫£ theo ƒë·ªãnh d·∫°ng markdown.${ownershipInfo}. L∆∞u √Ω: Kh√¥ng n√≥i g√¨ th√™m ch·ªâ ƒë∆∞a ra k·∫øt qu·∫£ ph√¢n t√≠ch`;

            const result = await aiService.processWithGoogleSearch(prompt);
            setAnalysis(result.text);
            
            // Add to history (only if not already there)
            if (!stockHistory.includes(stockSymbol.toUpperCase())) {
                setStockHistory(prev => {
                    const updatedHistory = [stockSymbol.toUpperCase(), ...prev];
                    return updatedHistory.slice(0, 10); // Keep only 10 entries
                });
            }
        } catch (error) {
            toast({
                title: "L·ªói",
                description: "Kh√¥ng th·ªÉ ph√¢n t√≠ch m√£ ch·ª©ng kho√°n. Vui l√≤ng th·ª≠ l·∫°i sau.",
                variant: "destructive",
            });
        } finally {
            setLoading(false);
        }
    };
    
    const generatePortfolio = async () => {
        if (!investmentAmount.trim() || parseFloat(investmentAmount) <= 0) {
            toast({
                title: "L·ªói",
                description: "Vui l√≤ng nh·∫≠p s·ªë ti·ªÅn ƒë·∫ßu t∆∞ h·ª£p l·ªá",
                variant: "destructive",
            });
            return;
        }

        setPortfolioLoading(true);
        try {
            // Get investment style description
            const styleInfo = investmentStyles.find(style => style.value === investmentStyle);
            const styleLabel = styleInfo ? styleInfo.label : 'C√¢n b·∫±ng';
            
            const formattedAmount = new Intl.NumberFormat('vi-VN', { 
                style: 'currency', 
                currency: 'VND',
                maximumFractionDigits: 0
            }).format(parseFloat(investmentAmount));
            
            const prompt = `T√¥i mu·ªën ƒë·∫ßu t∆∞ ${formattedAmount} v√†o th·ªã tr∆∞·ªùng ch·ª©ng kho√°n Vi·ªát Nam v·ªõi phong c√°ch "${styleLabel}". 

H√£y gi√∫p t√¥i ph√¢n b·ªï s·ªë ti·ªÅn n√†y v√†o c√°c m√£ c·ªï phi·∫øu c·ª• th·ªÉ tr√™n s√†n ch·ª©ng kho√°n Vi·ªát Nam (HOSE, HNX, UPCOM) theo t·ª∑ l·ªá ph√π h·ª£p. C·∫ßn l√†m r√µ:

1. C√°c m√£ c·ªï phi·∫øu ƒë∆∞·ª£c khuy·∫øn ngh·ªã v√† l√Ω do ch·ªçn
2. T·ª∑ l·ªá ph√¢n b·ªï cho m·ªói m√£ (% t·ªïng s·ªë ti·ªÅn)
3. S·ªë ti·ªÅn c·ª• th·ªÉ c·∫ßn ƒë·∫ßu t∆∞ v√†o m·ªói m√£
4. S·ªë l∆∞·ª£ng c·ªï phi·∫øu d·ª± ki·∫øn (l√†m tr√≤n xu·ªëng) d·ª±a tr√™n gi√° hi·ªán t·∫°i
5. Chi·∫øn l∆∞·ª£c ƒë·∫ßu t∆∞ t·ªïng th·ªÉ
6. Khuy·∫øn ngh·ªã th·ªùi gian n·∫Øm gi·ªØ

Tr·∫£ v·ªÅ k·∫øt qu·∫£ theo ƒë·ªãnh d·∫°ng markdown c√≥ c·∫•u tr√∫c r√µ r√†ng. L∆∞u √Ω: Kh√¥ng n√≥i g√¨ th√™m, ch·ªâ ƒë∆∞a ra k·∫øt qu·∫£ ph√¢n t√≠ch.`;

            const result = await aiService.processWithGoogleSearch(prompt);
            setPortfolioAllocation(result.text);
        } catch (error) {
            toast({
                title: "L·ªói",
                description: "Kh√¥ng th·ªÉ t·∫°o ph√¢n b·ªï danh m·ª•c ƒë·∫ßu t∆∞. Vui l√≤ng th·ª≠ l·∫°i sau.",
                variant: "destructive",
            });
        } finally {
            setPortfolioLoading(false);
        }
    };

    const resetHistory = () => {
        setStockHistory([]);
        setAnalysis(null);
    };

    const handleSharesChange = (e: React.ChangeEvent<HTMLInputElement>) => {
        // Allow only numbers
        const value = e.target.value.replace(/[^0-9]/g, '');
        setSharesOwned(value);
    };
    
    const handleAmountChange = (e: React.ChangeEvent<HTMLInputElement>) => {
        // Allow only numbers and decimal point
        const value = e.target.value.replace(/[^0-9]/g, '');
        setInvestmentAmount(value);
    };

    return (
        <div className="min-h-screen to-gray-50 py-8 px-4">
            <div className="max-w-4xl mx-auto">
                <div className="bg-white rounded-2xl shadow-lg border border-gray-200 overflow-hidden">
                    <div className="p-8">
                        <div className="space-y-8">
                            <div className="text-center mb-8">
                                <h1 className="text-3xl font-bold text-gray-800 mb-2">üìà Ph√¢n T√≠ch & ƒê·∫ßu T∆∞ Ch·ª©ng Kho√°n</h1>
                                <p className="text-gray-600">
                                    C√¥ng c·ª• th√¥ng minh h·ªó tr·ª£ ph√¢n t√≠ch v√† l·∫≠p k·∫ø ho·∫°ch ƒë·∫ßu t∆∞ ch·ª©ng kho√°n
                                </p>
                            </div>
                            
                            <Tabs defaultValue="analysis" className="w-full">
                                <TabsList className="grid grid-cols-2 mb-6">
                                    <TabsTrigger value="analysis" className="text-sm">Ph√¢n T√≠ch C·ªï Phi·∫øu</TabsTrigger>
                                    <TabsTrigger value="portfolio" className="text-sm">Ph√¢n B·ªï Danh M·ª•c</TabsTrigger>
                                </TabsList>
                                
                                <TabsContent value="analysis" className="space-y-6">
                                    <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                                        <div>
                                            <label className="block text-sm font-medium text-gray-700 mb-2">M√£ ch·ª©ng kho√°n</label>
                                            <input
                                                type="text"
                            placeholder="Nh·∫≠p m√£ ch·ª©ng kho√°n (VD: VNM, FPT, VIC...)"
                            value={stockSymbol}
                            onChange={(e) => setStockSymbol(e.target.value.toUpperCase())}
                                                className="w-full rounded-xl border-2 border-gray-200 px-4 py-3 text-sm focus:border-gray-400 focus:ring-2 focus:ring-gray-200 transition-all"
                                            />
                                        </div>
                                        
                                        <div>
                                            <label className="block text-sm font-medium text-gray-700 mb-2">Kho·∫£ng th·ªùi gian ph√¢n t√≠ch</label>
                                            <select
                                                value={analysisPeriod}
                                                onChange={(e) => setAnalysisPeriod(Number(e.target.value))}
                                                className="w-full rounded-xl border-2 border-gray-200 px-4 py-3 text-sm focus:border-gray-400 focus:ring-2 focus:ring-gray-200 transition-all"
                                            >
                                                {analysisPeriods.map(period => (
                                                    <option key={period.value} value={period.value}>
                                                        {period.label}
                                                    </option>
                                                ))}
                                            </select>
                                        </div>
                                    </div>
                                    
                                    <div>
                                        <label className="block text-sm font-medium text-gray-700 mb-2">
                                            S·ªë l∆∞·ª£ng c·ªï phi·∫øu ƒëang n·∫Øm gi·ªØ <span className="text-gray-500 text-xs">(kh√¥ng b·∫Øt bu·ªôc)</span>
                                        </label>
                                        <input
                                            type="text"
                                            placeholder="Nh·∫≠p s·ªë l∆∞·ª£ng c·ªï phi·∫øu b·∫°n ƒëang s·ªü h·ªØu"
                                            value={sharesOwned}
                                            onChange={handleSharesChange}
                                            className="w-full rounded-xl border-2 border-gray-200 px-4 py-3 text-sm focus:border-gray-400 focus:ring-2 focus:ring-gray-200 transition-all"
                                        />
                                    </div>
                                    
                                    <div className="bg-gray-50 p-4 rounded-xl border border-gray-200">
                                        <p className="text-sm font-medium text-gray-700 mb-3">T√πy ch·ªçn hi·ªÉn th·ªã</p>
                                        <div className="space-y-2">
                                            <label className="flex items-center gap-2 cursor-pointer">
                                                <input 
                                                    type="checkbox" 
                                                    checked={showCompanyInfo} 
                                                    onChange={() => setShowCompanyInfo(!showCompanyInfo)}
                                                    className="rounded text-gray-600 focus:ring-gray-400"
                                                />
                                                <span className="text-sm text-gray-700">Hi·ªÉn th·ªã th√¥ng tin c√¥ng ty</span>
                                            </label>
                                            
                                            <label className="flex items-center gap-2 cursor-pointer">
                                                <input 
                                                    type="checkbox" 
                                                    checked={showFinancialInfo} 
                                                    onChange={() => setShowFinancialInfo(!showFinancialInfo)}
                                                    className="rounded text-gray-600 focus:ring-gray-400"
                                                />
                                                <span className="text-sm text-gray-700">Hi·ªÉn th·ªã th√¥ng tin t√†i ch√≠nh</span>
                                            </label>
                                        </div>
                                    </div>
                                    
                                    <button
                            onClick={analyzeStock} 
                            disabled={loading}
                                        className="w-full flex items-center justify-center gap-3 py-4 px-6 bg-gradient-to-r from-gray-600 to-gray-700 text-white rounded-xl hover:from-gray-700 hover:to-gray-800 transition-all transform hover:scale-[1.02] disabled:opacity-70 disabled:hover:scale-100 shadow-lg"
                        >
                            {loading ? (
                                <>
                                                <Loader2 className="w-5 h-5 animate-spin" />
                                                <span className="font-medium">ƒêang ph√¢n t√≠ch...</span>
                                            </>
                                        ) : (
                                            <>
                                                <LineChart className="w-5 h-5" />
                                                <span className="font-medium">Ph√¢n t√≠ch</span>
                                            </>
                                        )}
                                    </button>
                                
                                    {(analysis !== null || loading) && (
                                        <div className="mt-8">
                                            <div className="bg-gradient-to-br from-gray-50 to-gray-100 p-8 rounded-xl border-2 border-gray-200 transition-all">
                                                <div className="flex flex-wrap items-center gap-2 mb-3">
                                                    <p className="text-sm text-gray-600 font-medium">K·∫øt qu·∫£ ph√¢n t√≠ch</p>
                                                    <span className="px-2 py-1 bg-gray-200 text-gray-700 text-xs rounded-full">
                                                        {analysisPeriod === 0 ? 'T·∫•t c·∫£' : `${analysisPeriod} ng√†y`}
                                                    </span>
                                                    {sharesOwned && parseInt(sharesOwned) > 0 && (
                                                        <span className="px-2 py-1 bg-gray-200 text-gray-700 text-xs rounded-full">
                                                            {sharesOwned} c·ªï phi·∫øu
                                                        </span>
                                                    )}
                                                </div>
                                                
                                                <div className="flex flex-wrap gap-2 mb-4">
                                                    {!showCompanyInfo && (
                                                        <span className="px-2 py-1 bg-gray-200 text-gray-600 text-xs rounded-full">
                                                            Kh√¥ng hi·ªÉn th·ªã th√¥ng tin c√¥ng ty
                                                        </span>
                                                    )}
                                                    {!showFinancialInfo && (
                                                        <span className="px-2 py-1 bg-gray-200 text-gray-600 text-xs rounded-full">
                                                            Kh√¥ng hi·ªÉn th·ªã th√¥ng tin t√†i ch√≠nh
                                                        </span>
                                                    )}
                                                </div>
                                                
                                                {loading ? (
                                                    <div className="text-center py-8">
                                                        <Loader2 className="w-10 h-10 animate-spin mx-auto text-gray-500" />
                                                        <p className="mt-4 text-gray-700">ƒêang t√¨m th√¥ng tin...</p>
                                                    </div>
                                                ) : (
                                                    <div className="prose prose-slate prose-headings:text-gray-800 prose-strong:text-gray-700 prose-a:text-gray-600 hover:prose-a:text-gray-800 max-w-none">
                                                        <ReactMarkdown>{analysis || ''}</ReactMarkdown>
                                                    </div>
                                                )}
                                            </div>
                                        </div>
                                    )}
                                    
                                    {stockHistory.length > 0 && (
                                        <div className="mt-8">
                                            <div className="flex items-center justify-between mb-3">
                                                <p className="text-sm font-medium text-gray-700">üìú L·ªãch s·ª≠ t√¨m ki·∫øm</p>
                                                <button
                                                    onClick={resetHistory}
                                                    className="text-xs text-gray-500 hover:text-gray-800 transition-colors"
                                                >
                                                    X√≥a l·ªãch s·ª≠
                                                </button>
                                            </div>

                                            <div className="bg-gray-50 rounded-xl border-2 border-gray-200 overflow-hidden">
                                                <div className="divide-y divide-gray-200">
                                                    {stockHistory.map((symbol, index) => (
                                                        <button 
                                                            key={index} 
                                                            className="p-4 text-sm hover:bg-gray-100 transition-colors w-full text-left"
                                                            onClick={() => {
                                                                setStockSymbol(symbol);
                                                                analyzeStock();
                                                            }}
                                                        >
                                                            <p className="font-medium text-gray-800">{symbol}</p>
                                                        </button>
                                                    ))}
                                                </div>
                                            </div>
                                        </div>
                                    )}
                                </TabsContent>
                                
                                <TabsContent value="portfolio" className="space-y-6">
                                    <div>
                                        <label className="block text-sm font-medium text-gray-700 mb-2">S·ªë ti·ªÅn ƒë·∫ßu t∆∞ (VND)</label>
                                        <input
                                            type="text"
                                            placeholder="Nh·∫≠p s·ªë ti·ªÅn ƒë·∫ßu t∆∞ (VD: 10000000)"
                                            value={investmentAmount}
                                            onChange={handleAmountChange}
                                            className="w-full rounded-xl border-2 border-gray-200 px-4 py-3 text-sm focus:border-gray-400 focus:ring-2 focus:ring-gray-200 transition-all"
                                        />
                                        {investmentAmount && (
                                            <p className="text-sm text-gray-500 mt-1">
                                                {new Intl.NumberFormat('vi-VN', { 
                                                    style: 'currency', 
                                                    currency: 'VND',
                                                    maximumFractionDigits: 0
                                                }).format(parseFloat(investmentAmount) || 0)}
                                            </p>
                                        )}
                                    </div>
                                    
                                    <div>
                                        <label className="block text-sm font-medium text-gray-700 mb-2">Phong c√°ch ƒë·∫ßu t∆∞</label>
                                        <select
                                            value={investmentStyle}
                                            onChange={(e) => setInvestmentStyle(e.target.value)}
                                            className="w-full rounded-xl border-2 border-gray-200 px-4 py-3 text-sm focus:border-gray-400 focus:ring-2 focus:ring-gray-200 transition-all"
                                        >
                                            {investmentStyles.map(style => (
                                                <option key={style.value} value={style.value}>
                                                    {style.label}
                                                </option>
                                            ))}
                                        </select>
                                    </div>
                                    
                                    <div className="bg-gray-50 p-5 rounded-xl border border-gray-200">
                                        <h3 className="text-sm font-medium text-gray-700 mb-2">M√¥ t·∫£ phong c√°ch ƒë·∫ßu t∆∞</h3>
                                        {investmentStyle === 'conservative' && (
                                            <p className="text-sm text-gray-600">
                                                <strong>An to√†n:</strong> ∆Øu ti√™n b·∫£o to√†n v·ªën, ph√¢n b·ªï nhi·ªÅu v√†o c·ªï phi·∫øu blue-chip, c·ªï t·ª©c cao v√† c√≥ ƒë·ªô bi·∫øn ƒë·ªông th·∫•p. L·ª£i nhu·∫≠n k·ª≥ v·ªçng th·∫•p h∆°n nh∆∞ng ·ªïn ƒë·ªãnh.
                                            </p>
                                        )}
                                        {investmentStyle === 'balanced' && (
                                            <p className="text-sm text-gray-600">
                                                <strong>C√¢n b·∫±ng:</strong> K·∫øt h·ª£p gi·ªØa an to√†n v√† tƒÉng tr∆∞·ªüng, ph√¢n b·ªï h·ª£p l√Ω gi·ªØa c·ªï phi·∫øu blue-chip v√† c·ªï phi·∫øu tƒÉng tr∆∞·ªüng. M·ª©c r·ªßi ro v√† l·ª£i nhu·∫≠n k·ª≥ v·ªçng ·ªü m·ª©c trung b√¨nh.
                                            </p>
                                        )}
                                        {investmentStyle === 'growth' && (
                                            <p className="text-sm text-gray-600">
                                                <strong>TƒÉng tr∆∞·ªüng:</strong> ∆Øu ti√™n t√¨m ki·∫øm l·ª£i nhu·∫≠n cao, ph√¢n b·ªï nhi·ªÅu v√†o c·ªï phi·∫øu tƒÉng tr∆∞·ªüng v√† c·ªï phi·∫øu c√≥ bi·∫øn ƒë·ªông cao. Ch·∫•p nh·∫≠n m·ª©c ƒë·ªô r·ªßi ro cao h∆°n.
                                            </p>
                                        )}
                                        {investmentStyle === 'aggressive' && (
                                            <p className="text-sm text-gray-600">
                                                <strong>M·∫°o hi·ªÉm:</strong> T√¨m ki·∫øm l·ª£i nhu·∫≠n t·ªëi ƒëa, ∆∞u ti√™n c·ªï phi·∫øu bi·∫øn ƒë·ªông m·∫°nh, penny stocks ho·∫∑c c·ªï phi·∫øu ng√†nh m·ªõi n·ªïi. M·ª©c ƒë·ªô r·ªßi ro r·∫•t cao nh∆∞ng c√≥ kh·∫£ nƒÉng sinh l·ªùi l·ªõn.
                                            </p>
                                        )}
                                    </div>
                                    
                                    <button
                                        onClick={generatePortfolio}
                                        disabled={portfolioLoading || !investmentAmount}
                                        className="w-full flex items-center justify-center gap-3 py-4 px-6 bg-gradient-to-r from-gray-600 to-gray-700 text-white rounded-xl hover:from-gray-700 hover:to-gray-800 transition-all transform hover:scale-[1.02] disabled:opacity-70 disabled:hover:scale-100 shadow-lg"
                                    >
                                        {portfolioLoading ? (
                                            <>
                                                <Loader2 className="w-5 h-5 animate-spin" />
                                                <span className="font-medium">ƒêang t·∫°o danh m·ª•c...</span>
                                </>
                            ) : (
                                            <>
                                                <PieChart className="w-5 h-5" />
                                                <span className="font-medium">T·∫°o danh m·ª•c ƒë·∫ßu t∆∞</span>
                                            </>
                                        )}
                                    </button>
                                    
                                    {(portfolioAllocation !== null || portfolioLoading) && (
                                        <div className="mt-8">
                                            <div className="bg-gradient-to-br from-gray-50 to-gray-100 p-8 rounded-xl border-2 border-gray-200 transition-all">
                                                <div className="flex flex-wrap items-center gap-2 mb-4">
                                                    <p className="text-sm text-gray-600 font-medium">Ph√¢n b·ªï danh m·ª•c ƒë·∫ßu t∆∞</p>
                                                    <span className="px-2 py-1 bg-gray-200 text-gray-700 text-xs rounded-full">
                                                        {new Intl.NumberFormat('vi-VN', { 
                                                            style: 'currency', 
                                                            currency: 'VND',
                                                            maximumFractionDigits: 0
                                                        }).format(parseFloat(investmentAmount) || 0)}
                                                    </span>
                                                    <span className="px-2 py-1 bg-gray-200 text-gray-700 text-xs rounded-full">
                                                        {investmentStyles.find(s => s.value === investmentStyle)?.label || 'C√¢n b·∫±ng'}
                                                    </span>
                    </div>

                                                {portfolioLoading ? (
                                                    <div className="text-center py-8">
                                                        <Loader2 className="w-10 h-10 animate-spin mx-auto text-gray-500" />
                                                        <p className="mt-4 text-gray-700">ƒêang t·∫°o danh m·ª•c ƒë·∫ßu t∆∞...</p>
                                                    </div>
                                                ) : (
                                                    <div className="prose prose-slate prose-headings:text-gray-800 prose-strong:text-gray-700 prose-a:text-gray-600 hover:prose-a:text-gray-800 prose-table:w-full prose-table:border-collapse prose-td:border prose-td:border-gray-300 prose-td:p-2 prose-th:border prose-th:border-gray-300 prose-th:p-2 prose-th:bg-gray-100 max-w-none">
                                                        <ReactMarkdown remarkPlugins={[remarkGfm]}>{portfolioAllocation || ''}</ReactMarkdown>
                                                    </div>
                                                )}
                                            </div>
                                        </div>
                                    )}
                                </TabsContent>
                            </Tabs>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    );
} 