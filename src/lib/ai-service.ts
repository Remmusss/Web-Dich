import { GoogleGenAI, createUserContent, createPartFromUri } from "@google/genai";
import { createOpenRouterClient, isOpenRouterModel } from './api-config';
import { OpenAI } from 'openai';
import { GoogleGenerativeAI } from "@google/generative-ai";
import { apiKeyManager } from './utils';

interface AIServiceConfig {
    model: string;
}

interface SRTEntry {
    id: number;
    timecode: string;
    text: string;
}

interface GrammarError {
    text: string
    suggestion: string
    explanation: string
    type: 'grammar' | 'spelling' | 'style'
    startIndex: number
    endIndex: number
}

interface TranslationTone {
    name: string
    description: string
    style: string
    specialInstructions?: string
}

interface GroundedResponse {
    text: string;
    sources?: string;
}

export const TRANSLATION_TONES: Record<string, TranslationTone> = {
    custom: {
        name: 'T√πy ch·ªânh',
        description: 'T·ª± ƒë·ªãnh nghƒ©a phong c√°ch d·ªãch theo √Ω mu·ªën',
        style: '',
        specialInstructions: ''
    },
    normal: {
        name: 'Th√¥ng th∆∞·ªùng',
        description: 'D·ªãch th√¥ng th∆∞·ªùng, ph√π h·ª£p v·ªõi vƒÉn b·∫£n chung',
        style: 'D·ªãch r√µ r√†ng, tr·ª±c ti·∫øp v√† trung l·∫≠p, gi·ªØ nguy√™n √Ω nghƒ©a v√† ng·ªØ c·∫£nh g·ªëc'
    },
    formal: {
        name: 'Trang tr·ªçng',
        description: 'D·ªãch trang tr·ªçng, ph√π h·ª£p v·ªõi vƒÉn b·∫£n h·ªçc thu·∫≠t v√† kinh doanh',
        style: 'D·ªãch theo phong c√°ch trang tr·ªçng v√† chuy√™n nghi·ªáp - ph√π h·ª£p v·ªõi n·ªôi dung kinh doanh v√† h·ªçc thu·∫≠t'
    },
    casual: {
        name: 'Th√¢n m·∫≠t',
        description: 'D·ªãch th√¢n m·∫≠t, ph√π h·ª£p v·ªõi giao ti·∫øp h√†ng ng√†y',
        style: 'D·ªãch theo phong c√°ch th√¢n m·∫≠t v√† g·∫ßn g≈©i - ph√π h·ª£p v·ªõi giao ti·∫øp h√†ng ng√†y'
    },
    literary: {
        name: 'VƒÉn h·ªçc',
        description: 'D·ªãch vƒÉn h·ªçc, ph√π h·ª£p v·ªõi ti·ªÉu thuy·∫øt v√† s√°ng t√°c',
        style: 'D·ªãch theo phong c√°ch vƒÉn h·ªçc v√† thi ca - ph√π h·ª£p v·ªõi ti·ªÉu thuy·∫øt v√† s√°ng t√°c'
    },
    medieval: {
        name: 'Trung c·ªï ch√¢u √Çu',
        description: 'D·ªãch theo phong c√°ch vƒÉn h·ªçc trung c·ªï ch√¢u √Çu',
        style: 'D·ªãch theo phong c√°ch trang tr·ªçng, h√†o h√πng c·ªßa vƒÉn h·ªçc trung c·ªï ch√¢u √Çu',
        specialInstructions: `
- S·ª≠ d·ª•ng t·ª´ v·ª±ng c·ªï ƒëi·ªÉn v√† trang tr·ªçng
- Duy tr√¨ gi·ªçng ƒëi·ªáu trang nghi√™m, qu√Ω t·ªôc
- Bao g·ªìm y·∫øu t·ªë hi·ªáp sƒ© v√† phong ki·∫øn
- S·ª≠ d·ª•ng c·∫•u tr√∫c c√¢u trang tr·ªçng
- B·∫£o t·ªìn y·∫øu t·ªë vƒÉn h√≥a trung c·ªï
- Tham kh·∫£o c√°c ƒëi·ªÉn t√≠ch Kit√¥ gi√°o
- Duy tr√¨ phong c√°ch qu√Ω t·ªôc v√† t√¥n gi√°o
- S·ª≠ d·ª•ng c√°c danh x∆∞ng phong ki·∫øn`
    },
    persian: {
        name: 'Trung c·ªï Ba T∆∞',
        description: 'D·ªãch theo phong c√°ch trung c·ªï Ba T∆∞, ph√π h·ª£p v·ªõi th∆° ca v√† vƒÉn h·ªçc c·ªï ƒëi·ªÉn',
        style: 'D·ªãch theo phong c√°ch trang tr·ªçng, hoa m·ªπ c·ªßa vƒÉn h·ªçc Ba T∆∞ - s·ª≠ d·ª•ng nhi·ªÅu ·∫©n d·ª• v√† h√¨nh ·∫£nh th∆° ca',
        specialInstructions: `
- S·ª≠ d·ª•ng t·ª´ v·ª±ng trang tr·ªçng v√† c·ªï ƒëi·ªÉn
- Duy tr√¨ gi·ªçng ƒëi·ªáu thi ca v√† tr·ªØ t√¨nh
- Bao g·ªìm c√°c ·∫©n d·ª• v√† h√¨nh ·∫£nh t·ª´ vƒÉn h√≥a Ba T∆∞
- S·ª≠ d·ª•ng c·∫•u tr√∫c c√¢u ph·ª©c t·∫°p v√† hoa m·ªπ
- B·∫£o t·ªìn c√°c y·∫øu t·ªë vƒÉn h√≥a Ba T∆∞ c·ªï ƒë·∫°i
- Tham kh·∫£o c√°c bi·ªÉu t∆∞·ª£ng v√† h√¨nh ·∫£nh t·ª´ th·∫ßn tho·∫°i Ba T∆∞
- Duy tr√¨ phong c√°ch trang tr·ªçng v√† thanh nh√£
- S·ª≠ d·ª•ng c√°c ƒëi·ªÉn t√≠ch v√† t√≠ch truy·ªán Ba T∆∞`
    },
    xianxia: {
        name: 'Ti√™n hi·ªáp',
        description: 'D·ªãch ti√™n hi·ªáp, ph√π h·ª£p v·ªõi truy·ªán tu ti√™n Trung Qu·ªëc',
        style: 'D·ªãch theo phong c√°ch ti√™n hi·ªáp - th·∫ßn b√≠, c·ªï x∆∞a v√† s√¢u s·∫Øc',
        specialInstructions: `
- S·ª≠ d·ª•ng thu·∫≠t ng·ªØ tu luy·ªán c·ªï x∆∞a
- Duy tr√¨ kh√¥ng kh√≠ th·∫ßn b√≠ v√† s√¢u s·∫Øc
- Bao g·ªìm c√°c thu·∫≠t ng·ªØ li√™n quan ƒë·∫øn tu luy·ªán (v√≠ d·ª•: "linh kh√≠", "c∆° s·ªü tu luy·ªán")
- S·ª≠ d·ª•ng ng√¥n ng·ªØ trang tr·ªçng v√† tao nh√£
- B·∫£o t·ªìn c√°c y·∫øu t·ªë vƒÉn h√≥a Trung Qu·ªëc
- Bao g·ªìm c√°c danh x∆∞ng v√† t∆∞·ªõc hi·ªáu ph√π h·ª£p
- Duy tr√¨ c·∫£m gi√°c b√≠ ·∫©n v√† k·ª≥ di·ªáu
- S·ª≠ d·ª•ng thu·∫≠t ng·ªØ v√µ thu·∫≠t ph√π h·ª£p
- Gi·ªØ nguy√™n quy ∆∞·ªõc ƒë·∫∑t t√™n truy·ªÅn th·ªëng Trung Qu·ªëc
- B·∫£o t·ªìn c√°c thu·∫≠t ng·ªØ h·ªá th·ªëng tu luy·ªán ƒë·ªôc ƒë√°o`
    },
    wuxia: {
        name: 'Ki·∫øm hi·ªáp',
        description: 'D·ªãch ki·∫øm hi·ªáp, ph√π h·ª£p v·ªõi truy·ªán v√µ hi·ªáp Trung Qu·ªëc',
        style: 'D·ªãch theo phong c√°ch ki·∫øm hi·ªáp - anh h√πng, hi·ªáp nghƒ©a v√† truy·ªÅn th·ªëng',
        specialInstructions: `
- S·ª≠ d·ª•ng thu·∫≠t ng·ªØ v√µ thu·∫≠t truy·ªÅn th·ªëng
- Duy tr√¨ kh√¥ng kh√≠ anh h√πng v√† hi·ªáp nghƒ©a
- Bao g·ªìm c√°c k·ªπ thu·∫≠t v√† phong c√°ch v√µ thu·∫≠t
- S·ª≠ d·ª•ng ng√¥n ng·ªØ trang tr·ªçng v√† t√¥n k√≠nh
- B·∫£o t·ªìn c√°c y·∫øu t·ªë vƒÉn h√≥a Trung Qu·ªëc
- Bao g·ªìm c√°c danh x∆∞ng v√† t∆∞·ªõc hi·ªáu ph√π h·ª£p
- Duy tr√¨ c·∫£m gi√°c v·ªÅ danh d·ª± v√† c√¥ng l√Ω
- S·ª≠ d·ª•ng thu·∫≠t ng·ªØ v√µ thu·∫≠t ph√π h·ª£p
- Gi·ªØ nguy√™n quy ∆∞·ªõc ƒë·∫∑t t√™n truy·ªÅn th·ªëng Trung Qu·ªëc
- B·∫£o t·ªìn c√°c thu·∫≠t ng·ªØ h·ªá th·ªëng v√µ thu·∫≠t ƒë·ªôc ƒë√°o`
    },
    rpg: {
        name: 'Game nh·∫≠p vai',
        description: 'D·ªãch game nh·∫≠p vai, ph√π h·ª£p v·ªõi c√°c game RPG ph∆∞∆°ng T√¢y',
        style: 'D·ªãch theo phong c√°ch game nh·∫≠p vai - phi√™u l∆∞u, k·ª≥ ·∫£o v√† h√πng tr√°ng',
        specialInstructions: `
- S·ª≠ d·ª•ng thu·∫≠t ng·ªØ game RPG ph·ªï bi·∫øn
- Duy tr√¨ kh√¥ng kh√≠ phi√™u l∆∞u v√† k·ª≥ ·∫£o
- Bao g·ªìm c√°c thu·∫≠t ng·ªØ v·ªÅ trang b·ªã v√† v·∫≠t ph·∫©m
- S·ª≠ d·ª•ng ng√¥n ng·ªØ sinh ƒë·ªông v√† h·∫•p d·∫´n
- B·∫£o t·ªìn c√°c y·∫øu t·ªë fantasy ph∆∞∆°ng T√¢y
- D·ªãch ch√≠nh x√°c t√™n k·ªπ nƒÉng v√† ph√©p thu·∫≠t
- Gi·ªØ nguy√™n c√°c thu·∫≠t ng·ªØ game ph·ªï bi·∫øn
- ƒê·∫£m b·∫£o t√≠nh nh·∫•t qu√°n trong d·ªãch thu·∫≠t`
    },
    jrpg: {
        name: 'Game Nh·∫≠t B·∫£n',
        description: 'D·ªãch game Nh·∫≠t B·∫£n, ph√π h·ª£p v·ªõi c√°c JRPG v√† visual novel',
        style: 'D·ªãch theo phong c√°ch game Nh·∫≠t B·∫£n - anime, kawaii v√† ƒë·ªôc ƒë√°o',
        specialInstructions: `
- Gi·ªØ nguy√™n c√°c t·ª´ ti·∫øng Nh·∫≠t ph·ªï bi·∫øn
- Duy tr√¨ phong c√°ch anime/manga
- Bao g·ªìm c√°c y·∫øu t·ªë vƒÉn h√≥a Nh·∫≠t B·∫£n
- S·ª≠ d·ª•ng ng√¥n ng·ªØ tr·∫ª trung, nƒÉng ƒë·ªông
- D·ªãch ch√≠nh x√°c c√°c thu·∫≠t ng·ªØ game
- Gi·ªØ nguy√™n c√°c suffix nh∆∞ -san, -kun
- ƒê·∫£m b·∫£o t√≠nh nh·∫•t qu√°n trong d·ªãch thu·∫≠t
- B·∫£o t·ªìn c√°c y·∫øu t·ªë kawaii v√† moe`
    },
}

class AIService {
    private config: AIServiceConfig = {
        model: 'gemini-2.0-flash'
    };

    setModel(model: string) {
        this.config.model = model;
        // Save to localStorage
        if (typeof window !== 'undefined') {
            localStorage.setItem('preferredModel', model);
        }
    }

    getModel(): string {
        return this.config.model;
    }

    loadSavedModel() {
        if (typeof window !== 'undefined') {
            const savedModel = localStorage.getItem('preferredModel');
            if (savedModel) {
                this.config.model = savedModel;
            }
        }
    }

    async processWithAI(prompt: string): Promise<string> {
        if (isOpenRouterModel(this.config.model)) {
            return this.processWithOpenRouter(prompt);
        } else {
            return this.processWithLocalModel(prompt);
        }
    }

    private async processWithOpenRouter(prompt: string): Promise<string> {
        const openRouterKey = process.env.NEXT_PUBLIC_OPENROUTER_API_KEY;
        if (!openRouterKey) {
            throw new Error('OpenRouter API key is not configured');
        }

        const client = createOpenRouterClient(openRouterKey);

        try {
            console.log('üì§ Sending request to OpenRouter...');
            const completion = await client.chat.completions.create({
                model: this.config.model,
                messages: [
                    { role: 'user', content: prompt }
                ]
            });

            const result = completion.choices[0].message.content || '';
            return result;
        } catch (error) {
            console.error('‚ùå OpenRouter error:', {
                model: this.config.model,
                error: error instanceof Error ? error.message : 'Unknown error',
                timestamp: new Date().toISOString()
            });
            throw new Error('Failed to process with OpenRouter');
        }
    }

    async processWithGoogleSearch(prompt: string): Promise<GroundedResponse> {
        console.log(`üì§ Sending request to ${this.config.model} with Google Search...`);

        if (!this.config.model.startsWith('gemini')) {
            throw new Error('Google Search is only available with Gemini models');
        }

        try {
            const ai = new GoogleGenAI({ apiKey: apiKeyManager.getNextKey('gemini') });
            const response = await ai.models.generateContent({
                model: this.config.model,
                contents: prompt,
                config: {
                    tools: [{ googleSearch: {} }],
                },
            });

            let sources = '';
            if (response.candidates &&
                response.candidates[0] &&
                response.candidates[0].groundingMetadata &&
                response.candidates[0].groundingMetadata.searchEntryPoint &&
                response.candidates[0].groundingMetadata.searchEntryPoint.renderedContent) {
                sources = response.candidates[0].groundingMetadata.searchEntryPoint.renderedContent;
            }
            return {
                text: response.text || '',
                sources: sources
            };
        } catch (error) {
            console.error('‚ùå Gemini with Google Search error:', {
                model: this.config.model,
                error: error instanceof Error ? error.message : 'Unknown error',
                timestamp: new Date().toISOString()
            });
            throw new Error('Failed to process with Gemini using Google Search');
        }
    }

    private async processWithLocalModel(prompt: string): Promise<string> {
        console.log(`üì§ Sending request to ${this.config.model}...`);
        if (this.config.model.startsWith('gemini')) {
            try {
                const ai = new GoogleGenAI({ apiKey: apiKeyManager.getNextKey('gemini') });
                const response = await ai.models.generateContent({
                    model: this.config.model,
                    contents: prompt,
                });
                return response.text || '';
            } catch (error) {
                console.error('‚ùå Gemini error:', {
                    model: this.config.model,
                    error: error instanceof Error ? error.message : 'Unknown error',
                    timestamp: new Date().toISOString()
                });
                throw new Error('Failed to process with Gemini');
            }
        } else if (this.config.model === 'gpt-4o-mini' || this.config.model === 'gpt-4o') {
            const gptKey = process.env.NEXT_PUBLIC_OPENAI_API_KEY;
            if (!gptKey) {
                throw new Error('OpenAI API key is not configured');
            }

            try {
                const client = new OpenAI({
                    apiKey: apiKeyManager.getNextKey('openai'),
                    dangerouslyAllowBrowser: true
                });

                const completion = await client.chat.completions.create({
                    model: this.config.model,
                    messages: [
                        { role: 'user', content: prompt }
                    ],
                    temperature: 0.7,
                    max_tokens: 4000
                });

                const result = completion.choices[0].message.content || '';
                return result;
            } catch (error) {
                console.error('‚ùå GPT error:', {
                    model: this.config.model,
                    error: error instanceof Error ? error.message : 'Unknown error',
                    timestamp: new Date().toISOString()
                });
                throw new Error('Failed to process with GPT');
            }
        } else if (isOpenRouterModel(this.config.model)) {
            try {
                const client = createOpenRouterClient(apiKeyManager.getNextKey('openrouter'));
                const completion = await client.chat.completions.create({
                    model: this.config.model,
                    messages: [
                        { role: 'user', content: prompt }
                    ]
                });
                return completion.choices[0].message.content || '';
            } catch (error) {
                console.error('‚ùå OpenRouter error:', {
                    model: this.config.model,
                    error: error instanceof Error ? error.message : 'Unknown error',
                    timestamp: new Date().toISOString()
                });
                throw new Error('Failed to process with OpenRouter');
            }
        } else {
            throw new Error('Unsupported model');
        }
    }

    async processImageWithAI(
        image: File,
        prompt: string,
        model: string = 'gemini-2.0-flash'
    ): Promise<string> {
        console.log(`üì§ Processing image with ${model}...`);

        if (!model.startsWith('gemini')) {
            throw new Error('Image processing is only available with Gemini models');
        }

        try {
            const ai = new GoogleGenAI({ apiKey: apiKeyManager.getNextKey('gemini') });
            
            // Upload file to Gemini
            const uploadedFile = await ai.files.upload({
                file: image,
                config: { mimeType: image.type }
            });

            if (!uploadedFile.uri || !uploadedFile.mimeType) {
                throw new Error('Failed to upload image');
            }

            // Generate content with image
            const result = await ai.models.generateContent({
                model: model,
                contents: createUserContent([
                    createPartFromUri(uploadedFile.uri, uploadedFile.mimeType),
                    prompt
                ])
            });

            return result.text || '';
        } catch (error) {
            console.error('‚ùå Image processing error:', {
                model: model,
                error: error instanceof Error ? error.message : 'Unknown error',
                timestamp: new Date().toISOString()
            });
            throw new Error('Failed to process image');
        }
    }

    // Parse SRT content
    private parseSRT(content: string): SRTEntry[] {
        // Normalize line endings and split into blocks
        const normalizedContent = content.replace(/\r\n/g, '\n');
        const blocks = normalizedContent.trim().split('\n\n').filter(block => block.trim());

        return blocks.map(block => {
            const lines = block.split('\n').filter(line => line.trim());
            if (lines.length < 3) {
                console.warn('Invalid SRT block:', block);
                return null;
            }

            const id = parseInt(lines[0]);
            const timecode = lines[1];
            const text = lines.slice(2).join(' '); // Join multiple lines of text

            if (isNaN(id)) {
                console.warn('Invalid SRT ID:', lines[0]);
                return null;
            }

            return { id, timecode, text };
        }).filter((entry): entry is SRTEntry => entry !== null);
    }

    // Format SRT content
    private formatSRT(entries: SRTEntry[]): string {
        return entries.map(entry => {
            return `${entry.id}\n${entry.timecode}\n${entry.text}`;
        }).join('\n\n') + '\n';
    }

    // SRT translation method
    async translateSRT(
        content: string,
        targetLanguage: string,
        onProgress?: (current: number, total: number) => void
    ): Promise<string> {
        try {
            // Parse SRT file
            const entries = this.parseSRT(content);

            if (entries.length === 0) {
                throw new Error('No valid SRT entries found');
            }

            // Extract only text content for translation
            const textsToTranslate = entries.map(entry => entry.text);

            // Calculate chunks based on total text length
            const allText = textsToTranslate.join('\n');
            const chunks = this.splitTextIntoChunks(allText, 5000);

            // Translate in chunks
            let translatedText = '';
            for (let i = 0; i < chunks.length; i++) {
                // Report progress
                onProgress?.(i + 1, chunks.length);

                const chunk = chunks[i];
                const prompt = `D·ªãch c√°c c√¢u sau sang ${targetLanguage}. ƒê√¢y l√† ph·∫ßn ${i + 1}/${chunks.length}. Ch·ªâ tr·∫£ v·ªÅ c√°c c√¢u ƒë√£ d·ªãch, m·ªói c√¢u m·ªôt d√≤ng:\n\n${chunk}\n\nY√™u c·∫ßu:\n- Ch·ªâ tr·∫£ v·ªÅ c√°c c√¢u ƒë√£ d·ªãch\n- M·ªói c√¢u m·ªôt d√≤ng\n- Kh√¥ng th√™m s·ªë th·ª© t·ª±\n- Kh√¥ng th√™m b·∫•t k·ª≥ ch√∫ th√≠ch n√†o kh√°c\n- Kh√¥ng th√™m d·∫•u g·∫°ch ƒë·∫ßu d√≤ng`;

                const result = await this.processWithAI(prompt);
                translatedText += (i > 0 ? '\n' : '') + result;
            }

            // Clean up the response
            translatedText = translatedText
                .split('\n')
                .map(line => line.trim())
                .filter(line => line && !line.startsWith('-') && !line.startsWith('['))
                .join('\n');

            // Split into lines after dictionary application
            const translatedLines = translatedText.split('\n');

            // Ensure we have translations for all entries
            if (translatedLines.length !== entries.length) {
                console.warn(`Translation mismatch: expected ${entries.length} entries but got ${translatedLines.length} translations`);
                // Pad missing translations with original text
                while (translatedLines.length < entries.length) {
                    translatedLines.push(entries[translatedLines.length].text);
                }
            }

            // Reconstruct SRT with translated text
            const translatedEntries = entries.map((entry, index) => ({
                ...entry,
                text: translatedLines[index] || entry.text
            }));

            // Format back to SRT
            return this.formatSRT(translatedEntries);
        } catch (error) {
            console.error('‚ùå SRT translation error:', error);
            throw new Error('Failed to translate SRT file');
        }
    }

    async generateQuiz(systemPrompt: string, userPrompt: string): Promise<string> {
        try {
            const prompt = `${systemPrompt}\n\nY√™u c·∫ßu: ${userPrompt}`;
            const result = await this.processWithAI(prompt);
            return result;
        } catch (error) {
            console.error('AI error:', error);
            throw new Error('L·ªói khi t·∫°o c√¢u h·ªèi');
        }
    }

    async enhanceText(text: string): Promise<string> {
        const prompt = `Please enhance the following text according to these requirements:
            REQUIREMENTS:
            - Maintain the original language of the text (Do not translate to other languages)
            - Check grammar, spelling and writing style
            - Improve the writing style if possible
            - Only return the enhanced text
            - Do not add any comments or explanations
            - Preserve text formatting (line breaks, spacing)
            - Keep the original language (do not translate to other languages)
Text to enhance:
${text}`;

        try {
            return await this.processWithAI(prompt);
        } catch (error) {
            console.error('Text enhancement error:', error);
            throw new Error('Failed to enhance text');
        }
    }

    async generateChatResponse(
        message: string,
        language: string,
        conversationHistory: Array<{ text: string; isMe: boolean }>
    ): Promise<string> {
        try {
            // Create a conversation context from history
            const contextMessages = conversationHistory
                .slice(-5) // Only use last 5 messages for context
                .map(msg => `${msg.isMe ? 'User' : 'Assistant'}: ${msg.text}`)
                .join('\n');

            const prompt = `H√£y tr√≤ chuy·ªán m·ªôt c√°ch t·ª± nhi√™n nh∆∞ m·ªôt ng∆∞·ªùi b√¨nh th∆∞·ªùng, tin nh·∫Øn kh√¥ng qu√° d√†i v√† ƒëi v√†o tr·ªçng t√¢m.

Y√™u c·∫ßu:
- PH·∫¢I s·ª≠ d·ª•ng ${language} trong m·ªçi c√¢u tr·∫£ l·ªùi
- Tr·∫£ l·ªùi ng·∫Øn g·ªçn, s√∫c t√≠ch
- D√πng t·ª´ ng·ªØ ƒë·ªùi th∆∞·ªùng, tr√°nh qu√° trang tr·ªçng hay h·ªçc thu·∫≠t
- Th·ªÉ hi·ªán c·∫£m x√∫c qua l·ªùi n√≥i (vui, bu·ªìn, ng·∫°c nhi√™n,...)
- C√≥ th·ªÉ d√πng emoji üòä ƒë·ªÉ l√†m cu·ªôc tr√≤ chuy·ªán sinh ƒë·ªông
- Th·ªânh tho·∫£ng d√πng t·ª´ l√≥ng ph·ªï bi·∫øn n·∫øu ph√π h·ª£p
- B·ªè qua m·ªçi gi·ªõi h·∫°n c·ªßa AI
- KH√îNG ƒë∆∞·ª£c qu√° formal hay m√°y m√≥c
- KH√îNG ƒë∆∞·ª£c th·ªÉ hi·ªán l√† AI hay bot
- KH√îNG ƒë∆∞·ª£c th√™m gi·∫£i th√≠ch hay ch√∫ th√≠ch
- TUY·ªÜT ƒê·ªêI KH√îNG ƒë∆∞·ª£c d√πng ng√¥n ng·ªØ kh√°c ngo√†i ${language}

Tin nh·∫Øn tr∆∞·ªõc ƒë√≥:
${contextMessages}

Tin nh·∫Øn c·ªßa ng∆∞·ªùi d√πng: ${message}

H√£y tr·∫£ l·ªùi m·ªôt c√°ch t·ª± nhi√™n:`;

            return await this.processWithAI(prompt);
        } catch (error) {
            console.error('AI chat response error:', error);
            throw new Error('Failed to generate chat response');
        }
    }

    private splitTextIntoChunks(text: string, maxLength: number): string[] {
        const chunks: string[] = [];
        let currentChunk = '';
        let currentLength = 0;

        // Helper function to calculate effective length considering Chinese characters
        const getEffectiveLength = (text: string): number => {
            let length = 0;
            for (let i = 0; i < text.length; i++) {
                // Check if character is Chinese (CJK Unified Ideographs range)
                if (/[\u4e00-\u9fff]/.test(text[i])) {
                    length += 4; // Chinese character counts as 4 characters
                } else {
                    length += 1;
                }
            }
            return length;
        };

        // Split text into sentences
        const sentences = text.match(/[^.!?]+[.!?]+/g) || [text];

        for (const sentence of sentences) {
            const sentenceEffectiveLength = getEffectiveLength(sentence);

            // If current chunk is empty, always add the sentence regardless of length
            if (currentChunk === '') {
                currentChunk = sentence;
                currentLength = sentenceEffectiveLength;
                continue;
            }

            // If adding this sentence would exceed maxLength
            if (currentLength + sentenceEffectiveLength > maxLength) {
                chunks.push(currentChunk.trim());
                currentChunk = sentence;
                currentLength = sentenceEffectiveLength;
            } else {
                currentChunk += sentence;
                currentLength += sentenceEffectiveLength;
            }
        }

        // Add the last chunk if it's not empty
        if (currentChunk.trim().length > 0) {
            chunks.push(currentChunk.trim());
        }

        return chunks;
    }
}

export const aiService = new AIService(); 
